{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"sweet-handy-api Diabetes self-management. Check out the project's documentation . Prerequisites Docker Travis CLI Heroku Toolbelt Initialize the project Start the dev server for local development: docker-compose up Create a superuser to login to the admin: docker-compose run --rm web ./manage.py createsuperuser Continuous Deployment Deployment automated via Travis. When builds pass on the master or qa branch, Travis will deploy that branch to Heroku. Enable this by: Creating the production sever: heroku create sweethandy-prod --remote prod && \\ heroku addons:create newrelic:wayne --app sweethandy-prod && \\ heroku addons:create heroku-postgresql:hobby-dev --app sweethandy-prod && \\ heroku config:set DJANGO_SECRET=`openssl rand -base64 32` \\ DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\ DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\ DJANGO_AWS_STORAGE_BUCKET_NAME=\"sweethandy-prod\" \\ --app sweethandy-prod Creating the qa sever: heroku create `sweethandy-qa --remote qa && \\ heroku addons:create newrelic:wayne && \\ heroku addons:create heroku-postgresql:hobby-dev && \\ heroku config:set DJANGO_SECRET=`openssl rand -base64 32` \\ DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\ DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\ DJANGO_AWS_STORAGE_BUCKET_NAME=\"sweethandy-qa\" \\ Securely add your heroku credentials to travis so it can automatically deploy your changes. travis encrypt HEROKU_AUTH_TOKEN=\"$(heroku auth:token)\" --add Commit your changes and push to master and qa to trigger your first deploys: git commit -m \"ci(travis): added heroku credentials\" && \\ git push origin master && \\ git checkout -b qa && \\ git push -u origin qa You're ready to continuously ship! \u2728 \ud83d\udc85 \ud83d\udef3","title":"Home"},{"location":"#sweet-handy-api","text":"Diabetes self-management. Check out the project's documentation .","title":"sweet-handy-api"},{"location":"#prerequisites","text":"Docker Travis CLI Heroku Toolbelt","title":"Prerequisites"},{"location":"#initialize-the-project","text":"Start the dev server for local development: docker-compose up Create a superuser to login to the admin: docker-compose run --rm web ./manage.py createsuperuser","title":"Initialize the project"},{"location":"#continuous-deployment","text":"Deployment automated via Travis. When builds pass on the master or qa branch, Travis will deploy that branch to Heroku. Enable this by: Creating the production sever: heroku create sweethandy-prod --remote prod && \\ heroku addons:create newrelic:wayne --app sweethandy-prod && \\ heroku addons:create heroku-postgresql:hobby-dev --app sweethandy-prod && \\ heroku config:set DJANGO_SECRET=`openssl rand -base64 32` \\ DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\ DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\ DJANGO_AWS_STORAGE_BUCKET_NAME=\"sweethandy-prod\" \\ --app sweethandy-prod Creating the qa sever: heroku create `sweethandy-qa --remote qa && \\ heroku addons:create newrelic:wayne && \\ heroku addons:create heroku-postgresql:hobby-dev && \\ heroku config:set DJANGO_SECRET=`openssl rand -base64 32` \\ DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\ DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\ DJANGO_AWS_STORAGE_BUCKET_NAME=\"sweethandy-qa\" \\ Securely add your heroku credentials to travis so it can automatically deploy your changes. travis encrypt HEROKU_AUTH_TOKEN=\"$(heroku auth:token)\" --add Commit your changes and push to master and qa to trigger your first deploys: git commit -m \"ci(travis): added heroku credentials\" && \\ git push origin master && \\ git checkout -b qa && \\ git push -u origin qa You're ready to continuously ship! \u2728 \ud83d\udc85 \ud83d\udef3","title":"Continuous Deployment"},{"location":"api/authentication/","text":"Authentication For clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example: Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Token The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/v1/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' Retrieving Tokens Authorization tokens are issued and returned when a user registers. A registered user can also retrieve their token with the following request: Request : POST api-token-auth/ Parameters: Name Type Description username string The user's username password string The user's password Response : { \"token\" : \"9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" }","title":"Authentication"},{"location":"api/authentication/#authentication","text":"For clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example: Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Token The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/v1/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b'","title":"Authentication"},{"location":"api/authentication/#retrieving-tokens","text":"Authorization tokens are issued and returned when a user registers. A registered user can also retrieve their token with the following request: Request : POST api-token-auth/ Parameters: Name Type Description username string The user's username password string The user's password Response : { \"token\" : \"9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" }","title":"Retrieving Tokens"},{"location":"api/users/","text":"Users Supports registering, viewing, and updating user accounts. Register a new user account Request : POST /users/ Parameters: Name Type Required Description username string Yes The username for the new user. password string Yes The password for the new user account. first_name string No The user's given name. last_name string No The user's family name. email string No The user's email address. Note: Not Authorization Protected Response : Content-Type application/json 201 Created { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", \"auth_token\": \"132cf952e0165a274bf99e115ab483671b3d9ff6\" } The auth_token returned with this response should be stored by the client for authenticating future requests to the API. See Authentication . Get a user's profile information Request : GET /users/:id Parameters: Note: Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", } Update your profile information Request : PUT/PATCH /users/:id Parameters: Name Type Description first_name string The first_name of the user object. last_name string The last_name of the user object. email string The user's email address. Note: All parameters are optional Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", }","title":"Users"},{"location":"api/users/#users","text":"Supports registering, viewing, and updating user accounts.","title":"Users"},{"location":"api/users/#register-a-new-user-account","text":"Request : POST /users/ Parameters: Name Type Required Description username string Yes The username for the new user. password string Yes The password for the new user account. first_name string No The user's given name. last_name string No The user's family name. email string No The user's email address. Note: Not Authorization Protected Response : Content-Type application/json 201 Created { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", \"auth_token\": \"132cf952e0165a274bf99e115ab483671b3d9ff6\" } The auth_token returned with this response should be stored by the client for authenticating future requests to the API. See Authentication .","title":"Register a new user account"},{"location":"api/users/#get-a-users-profile-information","text":"Request : GET /users/:id Parameters: Note: Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", }","title":"Get a user's profile information"},{"location":"api/users/#update-your-profile-information","text":"Request : PUT/PATCH /users/:id Parameters: Name Type Description first_name string The first_name of the user object. last_name string The last_name of the user object. email string The user's email address. Note: All parameters are optional Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", }","title":"Update your profile information"}]}